# 1 "ldivmod.s"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "ldivmod.s"
# 33 "ldivmod.s"
    .code16

    .global ldivmod
    .text
    .align 1

ldivmod:
    mov %di,%dx
    mov %bh,%dl
    test %di,%di
    jns set_asign
    neg %di
    neg %cx
    sbb $0,%di

set_asign:
    test %bx,%bx
    jns got_signs
    neg %bx
    neg %ax
    sbb $0,%bx
    jmp got_signs

    .global ludivmod
    .align 1

ludivmod:
    xor %dx,%dx

got_signs:
    push %bp
    push %si
    mov %sp,%bp
    push %di
    push %cx

b0 = -4
b16 = -2

    test %di,%di
    jne divlarge
    test %cx,%cx
    je divzero
    cmp %cx,%bx
    jae divlarge
    xchg %bx,%dx
    div %cx
    xchg %ax,%cx
    xchg %bx,%ax
    xchg %dx,%ax
    mov %di,%bx
    jmp zdivu1

divzero:
    test %dl,%dl
    jns return
    jmp negr

divlarge:
    push %dx
    mov %di,%si
    mov %cx,%dx
    xor %cx,%cx
    mov %cx,%di





    cmp %bx,%si
    jb loop1
    ja zdivu
    cmp %ax,%dx
    ja zdivu



loop1:
    shl $1,%dx
    rcl $1,%si
    jc loop1_exit
    cmp %bx,%si
    jb loop1
    ja loop1_exit
    cmp %ax,%dx
    jbe loop1

loop1_exit:
    rcr $1,%si
    rcr $1,%dx

loop2:
    shl $1,%cx
    rcl $1,%di
    cmp %bx,%si
    jb loop2_over
    ja loop2_test
    cmp %ax,%dx
    ja loop2_test

loop2_over:
    add $1,%cx
    adc $0,%di
    sub %dx,%ax
    sbb %si,%bx

loop2_test:
    shr $1,%si
    rcr $1,%dx
    cmp b16(%bp),%si
    ja loop2
    jb zdivu
    cmp b0(%bp),%dx
    jae loop2

zdivu:
    pop %dx

zdivu1:
    test %dh,%dh
    js zbminus
    test %dl,%dl
    jns return
    mov %ax,%dx
    or %bx,%dx
    je negq
    sub b0(%bp),%ax
    sbb b16(%bp),%bx
    not %cx
    not %di

negr:
    neg %bx
    neg %ax
    sbb $0,%bx
return:
    mov %bp,%sp
    pop %si
    pop %bp
    ret

    .align 1

zbminus:
    test %dl,%dl
    js negr
    mov %ax,%dx
    or %bx,%dx
    je negq
    sub b0(%bp),%ax
    sbb b16(%bp),%bx
    not %cx
    not %di
    mov %bp,%sp
    pop %si
    pop %bp
    ret

    .align 1

negq:
    neg %di
    neg %cx
    sbb $0,%di
    mov %bp,%sp
    pop %si
    pop %bp
    ret
