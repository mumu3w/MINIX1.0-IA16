# 1 "fsck1.s"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "fsck1.s"

.code16
.section .text

STACK_SIZE = 2048
KERNRL_CS = 0x60

.extern main
.extern _begbss
.extern _endbss

.global start
start:



        mov $_begbss, %bx
        # mov brksize, %cx
        # mov (brksize), %cx
        mov $_endbss, %cx
        sub %bx, %cx
        sar $1, %cx
        xor %ax, %ax
    .start_lp01:
        mov %ax, (%bx)
        add $2, %bx
        loop .start_lp01




        mov $fsck_stack+STACK_SIZE, %sp
        call main
        mov %ax, %bx

        cli
        mov $KERNRL_CS, %dx
        mov %dx, %ds
        mov %dx, %es
        mov %dx, %ss
        ljmp $KERNRL_CS, $0

.global bios_putc
bios_putc:
        push %bp
        mov %sp, %bp
        push %di
        push %si
        push %ax
        push %dx

        mov 4(%bp), %al
        mov $0, %bh
        mov $0x0e, %ah
        int $0x10

        pop %dx
        pop %ax
        pop %si
        pop %di
        mov %bp, %sp
        pop %bp
        ret

.global bios_getc
bios_getc:
        xor %ah, %ah
        int $0x16
        ret




 .global fmemcpyb
fmemcpyb:
 mov %es,%bx
 mov %si,%ax
 mov %di,%dx
 mov %sp,%si
 mov 10(%si),%cx
 les 2(%si),%di
 lds 6(%si),%si
 cld
 rep
 movsb
 mov %ax,%si
 mov %dx,%di
 mov %ss,%ax
 mov %ax,%ds
 mov %bx,%es
 ret




 .global fmemsetb
fmemsetb:
 mov %es,%bx
 mov %di,%dx
 mov %sp,%di
 mov 6(%di),%ax
 mov 8(%di),%cx
 les 2(%di),%di
 cld
 rep
 stosb
 mov %dx,%di
 mov %bx,%es
 ret




 .global fmemcmpb
fmemcmpb:
 mov %es,%bx
 mov %si,%ax
 mov %di,%dx
 mov %sp,%si
 mov 10(%si),%cx
 les 2(%si),%di
 lds 6(%si),%si
 cld
 repz
 cmpsb
 mov %ax,%si
 mov %dx,%di
 jz fmemcmpb_same
 mov $1,%ax
 jmp fmemcmpb_exit

fmemcmpb_same:
 xor %ax,%ax

fmemcmpb_exit:
 mov %ss,%dx
 mov %dx,%ds
 mov %bx,%es
 ret

.section .begdata
        .global data_org
        data_org:
                # .word 0xdada, 0, 0, 0, 0, 0, 0, 0
                .fill 8, 2, 0xdada


.section .data
        .global brksize
        brksize:
                .word _endbss

.section .bss
        .global fsck_stack
        # .comm fsck_stack, STACK_SIZE, 1
        fsck_stack:
                .fill STACK_SIZE, 1, 0
